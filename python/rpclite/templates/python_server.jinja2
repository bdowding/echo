# Generated Python Script
import enum
import struct
import abc
from rpclite.rpc_comms import RpcInfo, RpcServerComms
import rpclite.rpc_marshal

{%if enums%}
from .api_types import {%for e in enums%}{{e.get_name()}}{%if not loop.last%}, {%endif%}{%endfor%}
{%endif%}

{%if structs%}
from .api_types import {%for s in structs%}{{s.get_name()}}{%if not loop.last%}, {%endif%}{%endfor%}
{%endif%}


{%macro params(rpc, types)%}
{%for p in rpc.params%}, {{p.name}}{%if types%}: {{p.type.get_name()}}{%endif%}{%endfor%}
{%endmacro%}

{%macro rpc_params_converters(params)%}
{%for p in params%}bytes_to_{{p.type.get_name()}}{%if not loop.last%}, {%endif%}{%endfor%}
{%endmacro%}

{% for d in devices %}
class {{d.name}}Device(abc.ABC):
    def __init__(self, comms: RpcServerComms, base_index: int = 0):
        self._comms = comms
        self._base_index = base_index
        {% for rpc in d.rpcs%}
        self._comms.register_rpc({{loop.index0}}, RpcInfo(self.{{rpc.name}}, [{{rpc_params_converters(rpc.params)}}], "{{rpc.return_type.get_struct_code()}}"))
        {% endfor %}

    {% for rpc in d.rpcs%}
    @abc.abstractmethod
    def {{rpc.name}}(self{{params(rpc, True)}}) -> {{rpc.return_type.get_name()}}:
        pass
    
    {% endfor %}
{% endfor %}